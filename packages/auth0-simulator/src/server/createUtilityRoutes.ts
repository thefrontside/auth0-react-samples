import { Router } from "express";
import { decode } from "jsonwebtoken";
import { createJsonWebToken } from "./createJWT";

const html = String.raw;

export const createUtilityRoutes = ({ url }: { url: string }) => {
  const router = Router();

  router.get("/utility/token", (_req, res) => {
    res.set("Content-Type:text/html");
    res.send(renderTokenPage());
  });

  router.post("/utility/token", (req, res) => {
    const { email } = req.body;
    const accessToken = createJsonWebToken({});
    const jwtContents = decode(accessToken);

    const contentType = req.get("Content-Type");

    switch (contentType) {
      case "application/x-www-form-urlencoded":
        res.send(
          renderTokenPage({
            token: {
              accessToken,
              jwtContents: parseContents(jwtContents),
            },
            email,
          })
        );
        break;
      default:
        res.send({ accessToken });
    }
  });

  return router;
};

const parseContents = (contents) => {
  const safeParse = (maybeJson) => {
    try {
      return JSON.parse(maybeJson);
    } catch (err) {
      return maybeJson;
    }
  };

  return Object.keys(contents).reduce((obj, k) => {
    return {
      ...obj,
      [k]: safeParse(contents[k]),
    };
  }, {});
};

type RenderTokenArgs = {
  token?: { accessToken: string; jwtContents: Record<string, string> };
  email: string;
};

const renderTokenPage = (
  { token, email }: RenderTokenArgs = {
    email: "",
  }
) => {
  return html`
    <html>
      <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <link
          href="https://unpkg.com/tailwindcss@^2/dist/tailwind.min.css"
          rel="stylesheet"
        />
      </head>
      <body>
        <div class="max-w-screen-md m-auto space-y-10 mt-5">
          <h1 class="text-blue-800 text-3xl font-medium">Token Utility</h1>
          <p>
            A utility for generating tokens for use in the
            <a class="underline" href="http://localhost:3300/graphql"
              >GraphQL playground</a
            >. These tokens are verified and validated in the same way as those
            generated by the auth0 flow and can be used interchangeably.
          </p>
          <form class="space-y-4" method="post" action="/utility/token">
            <div class="flex flex-col space-y-2">
              <label
                class="text-xs uppercase tracking-wider text-blue-600"
                for="email"
                >Email</label
              >
              <div class="flex space-x-2">
                <input
                  class="p-1 pl-2 rounded-md border border-blue-600 flex-grow"
                  name="email"
                  value="${email}"
                />
                <button
                  class="flex-grow-0 py-2 px-4 rounded-md bg-blue-500 text-white"
                >
                  Submit
                </button>
              </div>
            </div>
          </form>

          ${renderToken({ token })}
        </div>
      </body>
    </html>
  `;
};

const renderToken = ({ token }) => {
  if (token) {
    return html`
      <div class="flex flex-col space-y-2">
        <p class="text-sm uppercase text-blue-600">Access Token</p>
        <code
          class="block w-auto overflow-x-scroll whitespace-nowrap p-2 text-lg"
          id="accessToken"
          >${token.accessToken}
        </code>
        <button
          class="py-2 px-4 rounded-md bg-blue-500 text-white"
          onclick="copyToken()"
          id="copyTokenButton"
        >
          Copy token
        </button>
      </div>
      <div>
        <p class="text-sm uppercase text-blue-600">JWT Payload</p>
        <code class="whitespace-pre"
          >${JSON.stringify(token.jwtContents, null, 2)}</code
        >
      </div>

      <script>
        async function copyToken() {
          const el = document.getElementById("accessToken");
          await navigator.clipboard.writeText(el.innerText);
          const copyTokenButton = document.getElementById("copyTokenButton");
          copyTokenButton.innerText = "Copied!";
        }
      </script>
    `;
  }

  return "";
};
